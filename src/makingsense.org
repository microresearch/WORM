* new progress

** 2/1/2017

- working on ROMS, TODO: extract rest of echo II female voices, rest
  of speak and spellDONE

-lpc_split adapted for: ./lpc_split D034 0 > roms/vocab_D034.h

- LPC/roms - all the 2xxx ones to fix up and test, alongside D0->34DONE

** 3/1

5100 to check/trim all:

vocab_2321.h-DONE
vocab_2322.h-DONE
vocab_2352.h-DONE
vocab_2350.h-DONE
vocab_2303.h-DONE
vocab_2304.h-DONE

5200 all d000-d034 - DONE but need to check against echo_female (all
there are in D000 and D003) 

- also groupings of these vocabs TODO - for example numbers, letters, allophones etc... so that banks make sense

/////

- new MAME votrax to PORT: started but filter issue...cur_va DONE -
  seems to work but timing is not so solid and we need vocab dataDONEtotest

- TODO - general below, ADC extent (eg. for modes, vocab) and vocabulary, how much
  better does mame code sound for say echo II speech/5200 Dxxx samplesDONE

- tested speak and spell on mame code sounds fine, some end glitch???

- extent good till 128 at least

- inverted ADC?

- , do Y and speed swop - DONE!

*- how we can bend TMS - other excitation-TRY with inverse filter in, X/Y/Z bendings, trigger=freeze?*

** 4/1+

- any changes for others in MAME? CHECK -> files are: TMS-NOchange, digitalk-NOchange DONE!

///

- proof of concept votrax working -. new mode... TODO: ARM port-compilesDONE, testTODO, all_vocabsTEST, TTS- see also deladriere code

// wow.c, gorf.c - convert to arraysDONE - TEST!

, bends-> pitch->m_rom_f1 (u8), phoneme length, change filters

////

- grouping of TMS vocabs and clear chipsets marked for arm mame code

- bends of TMS - first mode and start from here

- inversion of any ADC? - is flip bit in transform

TMS, sp0256, votrax, sam. TODO: newsay for basic phonemes, TTS and vocabulary(if any)

do we have vocab as in for allophones for TMS? NO

- where is inverse filter? -   LPC_residual function? TEST! _> lpcerror in audio.c

- where is crow lpc overlap?

- all readme notes for modes -> modes.org

** 5/1

- Votrax ARM code in audio.c to test - WORKING!DONE but speed is a bit wierd - FIXED

- that we can abstract out same code in audio.c - later (and need
  abstract out further as does bit shifts in some cases but place this
  in generator code)

//////////////////////////////////////////////////

//-> TTS work-BELOW 0 TMS-TODO, VOTRAX-TODO, leave the rest!

map 64x64 X and Y to position/ascii code for TTS leaves Z for length of ascii or buffer

//->what are bends for each, organise vocabs

// also question of phoneme probability mapping for all chipsets - recap how we did this for klatt

// klatt notes

** 6/1+

- first three modes don;t seem to work - talkie, sp0256 and klatt ????
- programming issue also most times???

WHY?

*sp0256 is fixed, talkie was ok, klatt was missing biquad, compiler changed but still issue in one of the inits - figure out?!!!*

/// 

- re-test sp0256 TTS additions on lapDONE and ARM - DONE but sp0256 speed is too fast - DIVIDE!

- X/Y prototype for sp0256 TTS

- test votrax vocabs and do as newsay - same for other vocabs we might have (sp0256, what else?)

- other sp0256 roms - how these are handled

- add/test all TTS on ARM

/////

- group TMS vocabs and mark chip // solution for this

- test each init/mode - sp0256 as above, start with TMS -> vocab,TTS, phonemes, raw, other excitations for all, do we use talkie code?

///

- where we need inversion on X, Y, Z and speed? - this is marked in struct there!

- where is inverse filter? -   LPC_residual function? TEST! _> lpcerror in audio.c

- where is crow lpc overlay?

- all readme notes for modes -> modes.org

- what are all the bends? - sp0256 pitch should subtract

- klatt re-acquaint

- start on audio.c modes/abstraction and place bitshifts in generators

** 7/1

- new lpcreader for romsDONE - 3150,3220 for ti99 - sewermania and microsurgeonDONE - added to vocab_testroms.h

** 8/1

- TTS votrax with multiples - compiles on both - to TEST on lap/ARM!

- mapping/making TTS in_array should be in TTS/english2phoneme using
  mapytoascii - arrays can also be there so no need to pass in ... but
  when is mapping of X/Y called -> whole phrase only changes on end of
  whole TTS phrase... - trigger to re-do whole/newsay but make mapping
  faster and regular - mapping in audio.c makes sense so is
  timed... also for all XY mappings - which are?

- discs of TRON TMS5220 - in Downloads // but TRONSS is sp0256

* TTS

: gcc newenglish.c parse.c phoneme.c saynum.c spellwor.c -o teets -std=c99 -DLAP

parse has main in it.

TODO: test with 256, with SAM, add klatt/TMS/votrax phoneme mappings
and function, and test all, test encapsulation, port to arm and test
there (X/Y)

//256: tested on lap, code is there for TTS in ARM version but I guess
needs to be checked (changed and use as template for SAM etc.)

** NOTES:

ASCII is values:

0-9= 47->57
space= 32
caps=65-90
lowercase=97-122

TOTAL: 64 with 2 spaces at start

CHECK sp0256 end 255//////////!!!!!!!!!!!!!!!!!!!!!!!!

make array of these values to remap 64x64

{32, 32, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 70,
71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,
88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122};

/////

** TMS phoneme list:

there are 125 allophons plus pause - TODO: check these

convert

{AE1, AE1, AH1, AH1, AW1, AW1, E1 , E1N, EH1, EH1, ER1, I1 , I1N, OO1,
OW1, U1 , U1N, UH1, UH1, UH1, Y1 , Y1N, ER1, OW1, Y2 , AE2, AH2, AI2,
AR2, AU2, AW2, E2 , EER, EH2, EHR, EI2, ER2, I2 , OI2, OO2, OOR, OR2,
OW2, U2 , UH2, UU2, AE3, AH3, AI3, AR3, AU3, AW3, E3 , EEL, EER, EH3,
EHR, EI3, ER3, I3 , ILL, ING, OI3, OO3, OOR, OR3, OW3, U3 , UH3, ULL,
UHL, UU3, L , L- , LL , M , MM , N , NN , NG1, NG2, R , W , WH , Y , B
, BB , D , DD , G1 , G2 , GG , J , JJ , THV, THV, V , VV , Z , ZZ , ZH
, ZH-, K2 , KH , KH-, KH1, KH2, P , PH , PH-, T , TH , TH-, CH , F ,
FF , HI , HO , HUH, S , SS , SH , SH-, THF, THF};

plus
126. Pause1 <short pause>
127. Pause2 <long pause>

** Klatt phoneme list - maybe leave

we started on this in parse.c

69 phonemes in Elements.def

{END, Q, P, PY, PZ, T, TY, TZ, K, KY, KZ, B, BY, BZ, D, DY, DZ, G, GY, GZ, M, N, NG, F, TH, S, SH, X, H, V, QQ, DH, DI, Z, ZZ, ZH, CH, CI, J, JY, L, LL, RX, R, W, Y, I, E, AA, U, O, OO, A, EE, ER, AR, AW, UU, AI, IE, OI, OU, OV, OA, IA, IB, AIR, OOR, OR};

[see also ipa.py]

- where do we find this? elements ones or other????

- need to re-acquaint with all of klatt - where we have phonemes earlier in whole process!?

** votrax sco1 phoneme list:

from deladriere but we converted

{0x05, 0x07,'0x08,0x05,0x03' , 0x0A, 0x0C, 0x0E,"0x12,0x11,0x11" ,
0x11,0x16', 0x15, '0x14,0x16,0x16', 0x1c, '0x0C,0x23',
0x1B,'0x0F,0x0D,0x0B,0x03' ,'0x0F,0x10,0x11,0x16' ,
'0x11,0x19,0x0F,0x07,0x06' , 0x27 , 0x24, 0x28, 0x25, '0x29,0x2c',
0x26, 0x34, 0x33, 0x35, 0x36, 0x30, 0x2f, 0x32, 0x2f, 0x2c, 0x37,
0x38, 0x39, 0x20, 0x23, 0x04, 0x1d, '0x28,0x2D,0x32' , '0x25,0x31',
0x23, 0, 0}

*question of accuracy and how to deal with multiples - convert multiples in parse.c but how to we flag multiple*

//NRL: IY, IH, EY, EH, AE, AA, AO, OW, UH, UW, ER, AX, AH, AY, AW, OY, p, b, t, d, k, g, f, v, TH, DH, s, z, SH, ZH, h, m, n, NG, l, w, y, r, CH, j, WH, PAUSE, ""

from: 

#phoneme strings adapted to match the SSI-263 phoneme chart and diphthong set

phons = {'AA': "0x0E", 'AE': "0x0C", 'AH':"0x1B", 'AO':"0x12,0x11,0x11", 'AR': "0x0C,0x1C",
         'AW': '0x0F,0x10,0x11,0x16', 'AX':'0x0C,0x23', 'AY': '0x0F,0x0D,0x0B,0x03', 'B': '0x24', 'CH': '0x28,0x2D,0x32',
         'D': '0x25', 'DH': '0x36', 'EH': '0x0A', 'EL': '0x0A,0x20', 'EN': '0x0A,0x38',
         'ER': '0x1C', 'EY': '0x08,0x05,0x03', 'F': '0x34', 'G': '0x26', 'HH': '0x2C',
         'IH': '0x07', 'IR': '0x07,0x1D', 'IY': '0x05', 'JH': '0x25,0x31', 'K': '0x29,0x2C',
         'L': '0x20', 'M': '0x37', 'N': '0x38', 'NG': '0x39', 'OW': '0x11,0x16',
         'OY': '0x11,0x19,0x0F,0x07,0x06', 'P': '0x27', 'R': '0x1D', 'S': '0x30', 'SH': '0x32',
         'T': '0x28', 'TH': '0x35', 'UH': '0x15', 'UR': '0x16,0x1C', 'UW': '0x14,0x16,0x16',
         'V': '0x33', 'W': '0x23', 'Y': '0x04', 'Z': '0x2F', 'ZH': '0x2F', 'SIL': '0'}


const char *const votrax_sc01_device::s_phone_table[64] =
{
	"EH3",  "EH2",  "EH1",  "PA0",  "DT",   "A1",   "A2",   "ZH",
	"AH2",  "I3",   "I2",   "I1",   "M",    "N",    "B",    "V",
	"CH",   "SH",   "Z",    "AW1",  "NG",   "AH1",  "OO1",  "OO",
	"L",    "K",    "J",    "H",    "G",    "F",    "D",    "S",
	"A",    "AY",   "Y1",   "UH3",  "AH",   "P",    "O",    "I",
	"U",    "Y",    "T",    "R",    "E",    "W",    "AE",   "AE1",
	"AW2",  "UH2",  "UH1",  "UH",   "O2",   "O1",   "IU",   "U1",
	"THV",  "TH",   "ER",   "EH",   "E1",   "AW",   "PA1",  "STOP"
};



* general TODO

- test new x220 flash and run! cableDONE

- start with one mode and its extensions and define/clean below from there

- basics eg. ROMS, filenamings, compost, 

XYZSPEED arrangement

, ADC extent,-128 at least

  control models:

eg. - TMS could be CV controlled with trigger/freeze=toggle settings - model for this kind of control

, layout, interpolXNO!, split of glottal sources, new code,
  TTS and where it is relevant, what else?

- basic modes templated: XYZ, speed, triggering, compost

each source/filter mode has regular in (eg. TMS, external in, other glottal sources)
X,Y,Z and speed...

///////

- LPC inverse filter as excitation and/or NOT so...
- vocoder and experimental modes
- clean ups, documentation, tests and release

- *worm control - MOVE OUT TO NEW MODULE alongside RAVEN!*


* TMS ROMS

classify each ROM in tms dir

** 5100-speak and spell

** 5200- early echo II, disks of TRON????, TI99/4 

** 5220- later echo II, BBC MICRO

* notes from README.org

- source/filter model we have sources as: input straight (fine for
oscillation or noise in), inverse filtered in, inv in as triggered
wavetable, inverse filtered audio buffer, audio buffer (and toggle off
write on use of audio buffer), physical glottal model, stored
wavetable as in raven, generators eg. pulse, square, and original
(eg. TMS, Klatt)


* main modes overview - otherwise see modes.org

** basic modes to do with suggested extensions - say 64 modes

1. TMS -> vocab,TTS, phonemes, raw, other excitations for all
2. SP0256 -> roms?,TTS, phonemes, vocab is done, raw?
3. digitalker ???
4. votrax -> TTS, phonemes, vocab is roms, raw?
5. SAM -> TTS, vocab(ported already), raw
6. klatt/nvp variations RE_ACQUAINT

7. LPC vocoder -> where is code for this? lpcanalysis?

see in README: 8.1 LPC vocoder/source - crossover with different sources and pitch following/off on ...

:lpc4.c now!????

wavetable and other insources and live LPC filter from IN! also window size variable?

potential also for live TMS/LPC recodings with pitch or add manual pitch:=

lookups and how this could work based on : using encoder - calc.m and
  romgen from talkie with freemat and online convertor - use 8 KHz 16
  bit mono recordings to encode words for lpc.c

pitch up and pitch down (we get pitch from auto-correlation), transpose coeffs in time

8. vocoder

- vocoder also with compost or with live generation of selected algos as VOICE and with INPUt as INSTRUMENT//EXCITATION

9. vosim/fof etc.
10. tube and ntube/glottal/wavetable
11. voicform?

12. compost - startX, endY in compost buffer and Z? Z as last mode
    still writing or NOT-but no poti changes HOW? - 2 stages with
    oldX.Y for example

13. what own brutal worm synth could be!

* chipsets/emulation/roms

rom data structure - only makes sense for TMS

- array pointer of pointers
- number of entries/length 
- chip ident (enum)

*** 5100//522x

LIST!

*** sp0256

256_roms.h - 

m_rom_256_012 - ?

m_rom_256_al2 - 64 allophones

vocab?

*** digitalker

digitalker_roms.h - 

m_rom (rename!)?

*** votrax 

- one rom with lots of vocab

* questions:

** all roms/dumps

MPF - TMS- http://electrickery.xs4all.nl/comp/mpf1/doc/index.html where are extended speech roms?

** control

** glottal sources

** vocoding

** data sources/wavetables to generate
