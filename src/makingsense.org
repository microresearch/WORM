* new progress

** 2/1/2017

- working on ROMS, TODO: extract rest of echo II female voices, rest
  of speak and spellDONE

-lpc_split adapted for: ./lpc_split D034 0 > roms/vocab_D034.h

- LPC/roms - all the 2xxx ones to fix up and test, alongside D0->34DONE

** 3/1

5100 to check/trim all:

vocab_2321.h-DONE
vocab_2322.h-DONE
vocab_2352.h-DONE
vocab_2350.h-DONE
vocab_2303.h-DONE
vocab_2304.h-DONE

5200 all d000-d034 - DONE but need to check against echo_female (all
there are in D000 and D003) 

- also groupings of these vocabs TODO - for example numbers, letters, allophones etc... so that banks make sense

/////

- new MAME votrax to PORT: started but filter issue...cur_va DONE -
  seems to work but timing is not so solid and we need vocab dataDONEtotest

- TODO - general below, ADC extent (eg. for modes, vocab) and vocabulary, how much
  better does mame code sound for say echo II speech/5200 Dxxx samplesDONE

- tested speak and spell on mame code sounds fine, some end glitch???

- extent good till 128 at least

- inverted ADC?

- , do Y and speed swop - DONE!

*- how we can bend TMS - other excitation-TRY with inverse filter in, X/Y/Z bendings, trigger=freeze?*

** 4/1+

- any changes for others in MAME? CHECK -> files are: TMS-NOchange, digitalk-NOchange DONE!

///
newvotrax:

- proof of concept votrax working -. new mode... TODO: ARM port-compilesDONE, testTODO, all_vocabsTEST, TTS- see also deladriere code

// wow.c, gorf.c - convert to arraysDONE - TEST!

, bends-> pitch->m_rom_f1 (u8), phoneme length, change filters

////

- grouping of TMS vocabs and clear chipsets marked for arm mame code

- bends of TMS - first mode and start from here

- inversion of any ADC? - is flip bit in transform

TMS, sp0256, votrax, sam. TODO: newsay for basic phonemes, TTS and vocabulary(if any)

do we have vocab as in for allophones for TMS? NO

- where is inverse filter? -   LPC_residual function? TEST! _> lpcerror in audio.c

- where is crow lpc overlap?

- all readme notes for modes -> modes.org

** 5/1

- Votrax ARM code in audio.c to test - WORKING!DONE but speed is a bit wierd - FIXED

[- that we can abstract out same code in audio.c - later (and need
  abstract out further as does bit shifts in some cases but place this
  in generator code)] maybe not?

//////////////////////////////////////////////////

//-> TTS work-BELOW 0 TMS-TODO, VOTRAX-TODO, leave the rest!

map 64x64 X and Y to position/ascii code for TTS leaves Z for length of ascii or buffer

//->what are bends for each, organise vocabs

// also question of phoneme probability mapping for all chipsets - recap how we did this for klatt

// klatt notes

** 6/1+

- first three modes don;t seem to work - talkie, sp0256 and klatt ????
- programming issue also most times???

WHY?

*sp0256 is fixed, talkie was ok, klatt was missing biquad, compiler changed but still issue in one of the inits - figure out?!!!*

/// 


- X/Y prototype for sp0256 TTS

- test votrax vocabs and do as newsay - same for other vocabs we might have (sp0256, what else?)

- other sp0256 roms - how these are handled

- add/test all TTS on ARM

/////

- group TMS vocabs and mark chip // solution for this

- test each init/mode - sp0256 as above, start with TMS -> vocab,TTS, phonemes, raw, other excitations for all, do we use talkie code?

///

- where we need inversion on X, Y, Z and speed? - this is marked in struct there!

- where is inverse filter? -   LPC_residual function? TEST! _> lpcerror in audio.c

- where is crow lpc overlay?

- all readme notes for modes -> modes.org

- what are all the bends? - sp0256 pitch should subtract - or some kind of midpoint somehowDONE-to test

- klatt re-acquaint

- start on audio.c modes/abstraction and place bitshifts in generators

** 7/1

- new lpcreader for romsDONE - 3150,3220 for ti99 - sewermania and microsurgeonDONE - added to vocab_testroms.h

** 8/1

- TTS votrax with multiples - compiles on both - to TEST on lapDONE/ARM!

- mapping/making TTS in_array should be in TTS/english2phoneme using
  mapytoascii - arrays can also be there so no need to pass in ... but
  when is mapping of X/Y called -> whole phrase only changes on end of
  whole TTS phrase... - trigger to re-do whole/newsay but make mapping
  faster and regular - mapping in audio.c makes sense so is
  timed... also for all XY mappings - which are?

- discs of TRON TMS5220 - in DownloadsDONE-15 vocab->end vocabs NOW?
  or as have good technique with lpcr/runread? // but TRONSS is sp0256

** 9/1 - 10/1

- TTS votrax on lap not working - sounds wrong??? - template thing
  matches for bitswap but is 64 bit read ok - looks reasonable as
  matches phonemes

- phonemes wrongly mapped (where?) or votrax is wrong_> floats, try
  with vocab from gamesFINE = issue in mapping: as code from
  deladriere was for SC02 which has different phoneme codes to SC01 -
  FIX: done in parse.c, TO_TEST, LAP-DONE, *ARM!*

*- bends for LPC is add or subtract values to each setting X/Y +-Z from vocab/rom and freeze on trigger*

** 10/1 - 12/1

*** sp0256

- re-test sp0256 TTS additions on lapDONE and ARM - DONE but sp0256 speed is too fast - DIVIDE!DONEbutstilltotweak

- prototypeDONE for TTS input into TTSinarray in audio.c and tested on
  sp0256 (that array is also inited there) - seems to work but pitch bend changed now to selz

- vocab in sp0256-DONEbut maybe split into 2 banks, 

in sp0256lap:

- other ROMs in sp0256_>

m_rom12 = phrases are at 6->42
m_rom19 = new code for extra roms added/fixed 5-74-allophone-are same as AL2- plus some phrases, 115-123, 

- what can be bent? it is instruction based but there is pitch and co-effs

from currah: The intonation bit seems to be a special feature of the Currah hardware (not a
feature of the SP0256 voice chip itself). Unknown how it is implemented... it
might modify the CLK passed to the SP0256... so, aside from the frequency, this
would also alter the durations, ie. the length of a "100ms" pause would vary...
or it might modify whatever kind of external low-pass and/or high-pass
filter...? The intonation does increase step-by-step (rather than changing
abruptly from low to high)... the stepping rate, and the max/min values are
unknown?

m_nsp->set_clock(dotclock / (2 << voice));-> sets sample rate only!


m_rom19 and extras:

we can access:

  80h..BFh Allophones (same as 00h..3Fh on SP0256-AL2)    C0h "Enemy"
  C1h "All clear"     C2h "Please"     C3h "Get off"      C4h "Open fire"
  C5h "Watch out"     C6h "Mercy"      C7h "Hit it"       C8h "You blew it"
  C9h "Do it again"   CAh "Incredible" FAh "U.F.O."       FBh "Monster!"

but no further with extra voice.cpp vocab - banks? see http://atarihq.com/danb/files/o2doc.pdf

*otherwise leave 19!* -> only possibility wrong roms but checkedSHA1 and
003 does work to some extent, <<3 offsetsNO, what might signal a rom
change?		

check: /*  FIFO up the lower 10 bits of the data.                          */

** 13/1 +

- clean up sp0256 (crash proof on roms and ditch 019)DONE - but needs to be tested

- sp0256 vocab from book to addDONE - but we need to split into banks all vocab there!

- sp0256 12 and 19 roms (switch banks there) to addDONE - to test

** 16/1 +

- resurrecting crow/Lpc: lpcanalysis.c

** 17/1 +

GENERAL:

- *do we not need to do a new_say when there is a change of mode to enter the new mode?*

- *check adc _selx eg. extents for arrays say in sp0256 as model*

- split sp0256 vocab into banks
- test TTS votrax on ARM

- raw sp0256 - code-driven and more bend style (eg. just pitch, amp and filters)
-> work on 2 lap versions

Instructions: http://spatula-city.org/~im14u2c/intv/tech/sp0256_instr_set.html

- raw votrax

- bends of all LPC - start with TMS as first mode and figure out prototype

- TMS TTS code/mappings -> DONE testing in lpc_say but sounds
  choppy???// also signal end of with 255->DONE - testing in lpc_say -
  but may not be so in TMS5220 code RE_TEST!

 
*** sp0256

- check that all newsays trigger micro for new address... DONE - TEST!

- dealing with different roms in sp0256.c: - DONE, with some error checking - TEST!

m_romAL2 - all allophones/so for usual/vocab/TTS - reset and bank
m_rom12 - phrases are at 6->42 - total 36
m_rom19 - 64-74 115-123 and 0-28 with ROM switch - total 46

///

clearly tabulate m_rom19:

5->63 - allophones as AL2
64->74 - game phrases
115-123 - game phrases
from here->255 odd allophones and repeats of phrases
142 - watchout
222 - enemy

****  	m_page     = 0x8000 << 3; // was 0x1000 // this works for last phrases

0->28 = phrases
TOTAL: 18+28=49

**** parameters

- TODO: check example values/range from working lap

cnt is set to 0
amp-int16 - upto say 1280+
per-uint32 - 255

*int16 b_coef -512 to +512 - or use the calc below with IQ for values of f->r say 0-255:*
fprintf(stderr, "f->r2: %d f->r3 %d\n",f->r[2 + 2*i], f->r[3 + 2*i]);
 
int16 f_coef -512 to +512 as above
interp flag - 1 or 0

*and handle pause - what else - how lenght/repeat counter works m_filt.rpt = repeat + 1;*

- for simple version - handle changes of these parameters and pauses!

	/* -------------------------------------------------------------------- */
	/*  Decode the Amplitude and Period registers.  Force the 'cnt' to 0    */
	/*  to get an initial impulse.  We compensate elsewhere by setting      */
	/*  the repeat count to "repeat + 1".                                   */
	/* -------------------------------------------------------------------- */
	f->amp = (f->r[0] & 0x1F) << (((f->r[0] & 0xE0) >> 5) + 0);
	f->cnt = 0;
	f->per = f->r[1];
	//	fprintf(stderr, "PER: %d\n",f->per);

	/* -------------------------------------------------------------------- */
	/*  Decode the filter coefficients from the quant table.                */
	/* -------------------------------------------------------------------- */
	for (i = 0; i < 6; i++)
	{
		#define IQ(x) (((x) & 0x80) ? qtbl[0x7F & -(x)] : -qtbl[(x)])

		f->b_coef[stage_map[i]] = IQ(f->r[2 + 2*i]);
		f->f_coef[stage_map[i]] = IQ(f->r[3 + 2*i]);
	}

	/*  Set the Interp flag based on whether we have interpolation parms    */

	f->interp = f->r[14] || f->r[15];

* TTS

: gcc newenglish.c parse.c phoneme.c saynum.c spellwor.c -o teets -std=c99 -DLAP

parse has main in it.

TODO: test with 256, with SAM, add klatt/TMS/votrax phoneme mappings
and function, and test all, test encapsulation, port to arm and test
there (X/Y)

//256: tested on lap, code is there for TTS in ARM version but I guess
needs to be checked (changed and use as template for SAM etc.)

** NOTES:

ASCII is values:

0-9= 47->57
space= 32
caps=65-90
lowercase=97-122

TOTAL: 64 with 2 spaces at start

CHECK sp0256 end 255//////////!!!!!!!!!!!!!!!!!!!!!!!!

make array of these values to remap 64x64

{32, 32, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 70,
71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,
88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122};

/////

** TMS phoneme list:

there are 125 allophons plus pause - TODO: check these

convert-> from user guide! test first before we convert

{0AE1, 1AE1, 2AH1, 3AH1, 4AW1, 5AW1, 6E1 , 7E1N, 8EH1, 9EH1, 10ER1, 11I1 , 12I1N, 13OO1,
14OW1, 15U1 , 16U1N, 17UH1, 18UH1, 19UH1, 20Y1 , 21Y1N, 22ER1, 23OW1, 24Y2 , 25AE2, 26AH2, 27AI2,
28AR2, 29AU2, 30AW2, 31E2 , 32EER, 33EH2, 34EHR, 35EI2, 36ER2, 37I2 , 38OI2, 39OO2, 40OOR, 41OR2,
42OW2, 43U2 , 44UH2, 45UU2, 46AE3, 47AH3, 48AI3, 49AR3, 50AU3, 51AW3, 52E3 , 53EEL, 54EER, 55EH3,
56EHR, 57EI3, 58ER3, 59I3 , 60ILL, 61ING, 62OI3, 63OO3, 64OOR, 65OR3, 66OW3, 67U3 , 68UH3, 69ULL,
70UHL, 71UU3, 72L , 73L- , 74LL , 75M , 76MM , 77N , 78NN , 79NG1, 80NG2, 81R , 82W , 83WH , 84Y , 85B
, 86BB , 87D , 88DD , 89G1 , 90G2 , 91GG , 92J , 93JJ , 94THV, 95THV, 96V , 97VV , 98Z , 99ZZ , 100ZH
, 101ZH-, 102K2 , 103KH , 104KH-, 105KH1, 106KH2, 107P , 108PH , 109PH-, 110T , 111TH , 112TH-, 113CH , 114F ,
115FF , 116HI , 117HO , 118HUH, 119S , 120SS , 121SH , 122SH-, 123THF, 124THF};

plus
126. Pause1 <short pause>
127. Pause2 <long pause>

** Klatt phoneme list - maybe leave

we started on this in parse.c

69 phonemes in Elements.def

{END, Q, P, PY, PZ, T, TY, TZ, K, KY, KZ, B, BY, BZ, D, DY, DZ, G, GY, GZ, M, N, NG, F, TH, S, SH, X, H, V, QQ, DH, DI, Z, ZZ, ZH, CH, CI, J, JY, L, LL, RX, R, W, Y, I, E, AA, U, O, OO, A, EE, ER, AR, AW, UU, AI, IE, OI, OU, OV, OA, IA, IB, AIR, OOR, OR};

[see also ipa.py]

- where do we find this? elements ones or other????

- need to re-acquaint with all of klatt - where we have phonemes earlier in whole process!?

** votrax sco1vs02 phoneme list:

from deladriere but we converted - but is for 02

{0x05, 0x07,'0x08,0x05,0x03' , 0x0A, 0x0C, 0x0E,"0x12,0x11,0x11" ,
0x11,0x16', 0x15, '0x14,0x16,0x16', 0x1c, '0x0C,0x23',
0x1B,'0x0F,0x0D,0x0B,0x03' ,'0x0F,0x10,0x11,0x16' ,
'0x11,0x19,0x0F,0x07,0x06' , 0x27 , 0x24, 0x28, 0x25, '0x29,0x2c',
0x26, 0x34, 0x33, 0x35, 0x36, 0x30, 0x2f, 0x32, 0x2f, 0x2c, 0x37,
0x38, 0x39, 0x20, 0x23, 0x04, 0x1d, '0x28,0x2D,0x32' , '0x25,0x31',
0x23, 0, 0}

SC01//enum Phonemes {	EH3, EH2, EH1, PA0, DT, A1,  A2,  ZH, 	AH2,    I3,  I2,  I1,  M,  N,   B,   V,	CH,     SH,  Z,   AW1, NG, AH1, OO1, OO,	L,      K,   J,   H,   G,  F,   D,   S,	A,      AY,  Y1,  UH3, AH, P,   O,   I,	U,      Y,   T,   R,   E,  W,   AE,  AE1,	AW2,    UH2, UH1, UH,  O2, O1,  IU,  U1,	THV,    TH,  ER,  EH,  E1, AW,  PA1, STOP};


*question of accuracy and how to deal with multiples - convert multiples in parse.c but how to we flag multiple*

//NRL: IY, IH, EY, EH, AE, AA, AO, OW, UH, UW, ER, AX, AH, AY, AW, OY, p, b, t, d, k, g, f, v, TH, DH, s, z, SH, ZH, h, m, n, NG, l, w, y, r, CH, j, WH, PAUSE, ""

from: 

#phoneme strings adapted to match the SSI-263 phoneme chart and diphthong set

phons = {'AA': "0x0E", 'AE': "0x2E", 'AH':"0x1B", 'AO':"0x12,0x11,0x11", 'AR': "0x0C,0x1C",
         'AW': '0x0F,0x10,0x11,0x16', 'AX':'0x0C,0x23', 'AY': '0x0F,0x0D,0x0B,0x03', 'B': '0x24', 'CH': '0x28,0x2D,0x32',
         'D': '0x25', 'DH': '0x36', 'EH': '0x0A', 'EL': '0x0A,0x20', 'EN': '0x0A,0x38',
         'ER': '0x1C', 'EY': '0x08,0x05,0x03', 'F': '0x34', 'G': '0x26', 'HH': '0x2C',
         'IH': '0x07', 'IR': '0x07,0x1D', 'IY': '0x05', 'JH': '0x25,0x31', 'K': '0x29,0x2C',
         'L': '0x20', 'M': '0x37', 'N': '0x38', 'NG': '0x39', 'OW': '0x11,0x16',
         'OY': '0x11,0x19,0x0F,0x07,0x06', 'P': '0x27', 'R': '0x1D', 'S': '0x30', 'SH': '0x32',
         'T': '0x28', 'TH': '0x35', 'UH': '0x15', 'UR': '0x16,0x1C', 'UW': '0x14,0x16,0x16',
         'V': '0x33', 'W': '0x23', 'Y': '0x04', 'Z': '0x2F', 'ZH': '0x2F', 'SIL': '0'}


const char *const votrax_sc01_device::s_phone_table[64] =
{
	"EH3",  "EH2",  "EH1",  "PA0",  "DT",   "A1",   "A2",   "ZH",
	"AH2",  "I3",   "I2",   "I1",   "M",    "N",    "B",    "V",
	"CH",   "SH",   "Z",    "AW1",  "NG",   "AH1",  "OO1",  "OO",
	"L",    "K",    "J",    "H",    "G",    "F",    "D",    "S",
	"A",    "AY",   "Y1",   "UH3",  "AH",   "P",    "O",    "I",
	"U",    "Y",    "T",    "R",    "E",    "W",    "AE",   "AE1",
	"AW2",  "UH2",  "UH1",  "UH",   "O2",   "O1",   "IU",   "U1",
	"THV",  "TH",   "ER",   "EH",   "E1",   "AW",   "PA1",  "STOP"
};



* general TODO

- test new x220 flash and run! cableDONE

- start with one mode and its extensions and define/clean below from there

- basics eg. ROMS, filenamings, compost, 

XYZSPEED arrangement

, ADC extent,-128 at least

  control models:

eg. - TMS could be CV controlled with trigger/freeze=toggle settings - model for this kind of control

, layout, interpolXNO!, split of glottal sources, new code,
  TTS and where it is relevant, what else?

- basic modes templated: XYZ, speed, triggering, compost

each source/filter mode has regular in (eg. TMS, external in, other glottal sources)
X,Y,Z and speed...

///////

- LPC inverse filter as excitation and/or NOT so...
- vocoder and experimental modes
- clean ups, documentation, tests and release

- *worm control - MOVE OUT TO NEW MODULE alongside RAVEN!*


* TMS ROMS

classify each ROM in tms dir

** 5100-speak and spell

** 5200- early echo II, disks of TRON????, TI99/4 

** 5220- later echo II, BBC MICRO

* notes from README.org

- source/filter model we have sources as: input straight (fine for
oscillation or noise in), inverse filtered in, inv in as triggered
wavetable, inverse filtered audio buffer, audio buffer (and toggle off
write on use of audio buffer), physical glottal model, stored
wavetable as in raven, generators eg. pulse, square, and original
(eg. TMS, Klatt)


* main modes overview - otherwise see modes.org

** basic modes to do with suggested extensions - say 64 modes

1. TMS -> vocab,TTS?, phonemes, raw, other excitations for all
2. SP0256 -> roms?,TTS, phonemes, vocab is done, raw?
3. digitalker ???
4. votrax -> TTS, phonemes, vocab is roms, raw?
5. SAM -> TTS, vocab(ported already), raw
6. klatt/nvp variations RE_ACQUAINT

7. LPC vocoder -> where is code for this? lpcanalysis?

see in README: 8.1 LPC vocoder/source - crossover with different sources and pitch following/off on ...

:lpc4.c now!????

wavetable and other insources and live LPC filter from IN! also window size variable?

potential also for live TMS/LPC recodings with pitch or add manual pitch:=

lookups and how this could work based on : using encoder - calc.m and
  romgen from talkie with freemat and online convertor - use 8 KHz 16
  bit mono recordings to encode words for lpc.c

pitch up and pitch down (we get pitch from auto-correlation), transpose coeffs in time

8. vocoder

- vocoder also with compost or with live generation of selected algos as VOICE and with INPUt as INSTRUMENT//EXCITATION

9. vosim/fof etc.
10. tube and ntube/glottal/wavetable
11. voicform?

12. compost - startX, endY in compost buffer and Z? Z as last mode
    still writing or NOT-but no poti changes HOW? - 2 stages with
    oldX.Y for example

13. what own brutal worm synth could be!

* chipsets/emulation/roms

rom data structure - only makes sense for TMS

- array pointer of pointers
- number of entries/length 
- chip ident (enum)

*** 5100//522x

LIST!

*** sp0256

256_roms.h - 

m_rom_256_012 - ?

m_rom_256_al2 - 64 allophones

vocab?

*** digitalker

digitalker_roms.h - 

m_rom (rename!)?

*** votrax 

- one rom with lots of vocab

* questions:

** all roms/dumps

MPF - TMS- http://electrickery.xs4all.nl/comp/mpf1/doc/index.html where are extended speech roms?

** control

** glottal sources

** vocoding

** data sources/wavetables to generate
