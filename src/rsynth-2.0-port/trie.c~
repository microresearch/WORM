#include <config.h>
/* trie.c
 */

#include "stm32f4xx.h"
//#include "platform_config.h"
//#include "hw_config.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <inttypes.h>
#include "trie.h"

#include <ctype.h>

struct trie_s
 {
  struct trie_s *otherwise;
  struct trie_s *more;
  void *value;
  char ch;
 };

void trie_insert(trie_ptr *r, char *s, void *value)
{
	trie_ptr p = NULL;
	char ch;
	while ((ch = *s++))
	{
		while ((p = *r))
		{
			if (p->ch == ch)
				break;
			else
		r = &p->otherwise;
		}
		if (!p)
		{
			p = (trie_ptr) malloc(sizeof(*p));
			if(p){
				memset(p, 0, sizeof(*p));
				p->ch = ch;
				*r = p;
			}else{
				fprintf(stderr, "memory shortage (trie_insert)\n");
			}
		}
		r = &p->more;
	}
	p->value = value;
}

void *trie_lookup(trie_ptr *r, char **sp)
{
	char *s = *sp;
	char *value = NULL;
	char ch;
	
	//printf("----------------- trie_lookup BEGIN\n");
	
	while ((ch = *s))
	{
		//printf("ch=%c\n", (int)ch);
		
		trie_ptr *l = r;
		trie_ptr p;
		while ((p = *l))
		{
			//printf("p->ch=%c\n", p->ch);
			
			if (p->ch == ch){
				//printf("found ch=%c\n", (int)ch);
				break;
			}else{
				l = &p->otherwise;
			}
		}
		
		if (p)
		{
			*l = p->otherwise;
			p->otherwise = *r;
			*r = p;
			r = &p->more;
			value = (char *) p->value;
			s++;
		}
		else
			break;
	}
	*sp = s;
	
	//printf("----------------- trie_lookup END\n");
	
	return value;
}


