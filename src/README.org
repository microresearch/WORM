* ERD/WORM dirty speech synth

32k sample rate

*we always need transition from previous phoneme for each mode (inc X/Y)!*

* worming

- wormbounds x/y exerted on parameters + speed of worming z?
- worm trigger?

* desc/manual

The WORM was for a long time desirous to speake, but the rule and
orâˆ£der of the Court enjoyned him silence, but now strutting and
swelling, and impatient, of further delay, he broke out thus... [Maier]

http://quod.lib.umich.edu/e/eebo/A51439.0001.001/1:3.6?rgn=div2;view=fulltext

In contrast to other speech modules which make use of a single speech
chip or algorithm ERD/WORM implements multiple speech codecs...

for cv and knobs - as above so below.... mirroring...


* discard

csound fof= http://www.csounds.com/manual/html/fof.html - ugens7.c

[1. phase vocoder/FFT - our old pitchscale.c??? 

JoshUGens/sc/classes/Vocoder.sc

SCcode=PV_SpectralMap, borsboom, snokoder]

runform in simforstacksansmem 

- what effects we implement in DI: mdavoc, pvvoc

* TODO

- sort out memory allocationsDONE
- basics of read/write head and speech integrationDONE
- tests for each speech function/mode
- vocoder 
- integrate/test/new knob allocations when we have PCB

...///
- port all speech algos 
- wormcode and klatt parameter limits
- inverse filter/LPC??? for klatt
- phoneme probabilities DONE
- run_holmes see below

* knobs

#define MODE 3 // for pcb=2
#define SELX 0 //3
#define SPEED 2 //0
#define END 4 //4
#define SELY 1 //1

* modes so far imagined - say 32 total!

0/klatt - single phoneme
0.1/klatt - list of phonemes
0.2/klatt - worm away starting on phoneme base (earth worm) - or trigger that base
1/vosim 
2/x-y filter 
3/LPC 
4/vocoder+different channel
swops/arrangements 
x/klatt screwed/bent 
x/other filter 
x/raw wormed klatt
x/wormed vosim 
x/wormed x/y filter

+ variations say on vosim etc...
+ other speech synths

++ vocoder options with different sources - square wave, white noise etc.

all modes doubled by worm - worm from base through parameter
constraints for each. trigger resets to base. thus double for each mode more or less

* progress

** 4/11/2015

- stripped code and it compiles

** 9-10/11/2015

- knobs left/right from top (pcb and lach=test) = 0/mode-(2..3)
1/selX.egX-(3..2) 2/speed-(0..4) 3/end-(4..1)
4/trigthresh/vocoderfreq/othersel.eg/selY-(1..0) SEE audio.h

- input=threshold/vocoder_voice

- question of scheduling: examples? trigger_to_sync needs to be in
  reading in code (and trigger say new phoneme), braids operates with blocks-sync_buffer and render_buffer?

what is framesize for audio=32 x u16//

- and how frames work for speech/klatt? - frame is 256 samples = 512 bytes

frame=XmS of audio output p so we have ms at 32K = 

*** - list modes and examples: 

0/klatt 1/vosim 2/x-y filter 3/LPC 4/vocoder+different channel
swops/arrangements x/klatt screwed x/other filter x/raw wormed klatt
x/wormed vosim x/wormed x/y filter

+++ vocoder options with different sources - square wave, white noise etc.

all modes doubled by worm - worm through parameters for each

- what are other speech synth/modes??? LIST from earthvoice2:

raw//basic klatt parameters?

[1- NON - as is too much timing based!  robo: arduino = 8 bit TTS:same as robo above]

2- DONE sam - not TINYsss....
sam: It is an adaption to C of the speech software SAM (Software Automatic Mouth) for the Commodore C64 - 8 bit and messy
tinySAM.c: small SAM above - 8 bit
SAMarduino: arduino of tinySAM above - 8 bit

3-
Talkie - LPCcode: :LPC - encode new words with QBoxPro/windows... TI99

[4-Tiny Speech Synth: C code - TinySynth.h 16 bit -> tiny.c]

[5-/afs/athena/astaff/project/phones/Speak emulates SPO256 - not really ]

[6-other: cantarino - /root/projects/ERD_modules/older/euro-modules/Talko/Software/Canto]

7- *braids(=rendervowel and rendervowelfof)* DONE

8-DONE:

Formlet as filter in SC: [[file:~/SuperCollider-Source/server/plugins/FilterUGens.cpp::void%20Formlet_next_1(Formlet*%20unit,%20int%20inNumSamples)][file:~/SuperCollider-Source/server/plugins/FilterUGens.cpp::void Formlet_next_1(Formlet* unit, int inNumSamples)]]

LPC: [[file:~/sc3-plugins/source/NCAnalysisUGens/LPCAnalysis.cpp::*%20LPCAnalysis.cpp][file:~/sc3-plugins/source/NCAnalysisUGens/LPCAnalysis.cpp::* LPCAnalysis.cpp]] and LPCsynth

- 2. 16 channel bandpass/formant/vocoder: ladspa DONE?in effect.c= vocoder.c

or vst-mda version: mdaVocoder.cpp TEST/TRY mdavoc=input and mdavocoder? see effect.c/mda...DONE

///????DONE???

X/Y//simple formant filtering (above)//generic filter conv. bbandpass, biquad, bandpass in effect.c and setup of 

and biquad in doformantfilter

- formant frequency/vowel table (vowels announced from buf16 as
  text->vowels,Q,length of vowel?)
  ????===arm_biquad_cascade_df1_init_f32??? in main.c in DI

///

formant ugens: http://gurzil.livejournal.com/15375.html

SC synthdef for vowels with BBandPass : http://sccode.org/1-4Vk

** xxx

*This week to have basic scheduling for klatt and knob allocations, memory. Also kind of template for other generators*

*template should be triggerable version and free-running version - mark each as such!*

** 11/11

- can we have say 128k contig memory? can use say 120k but need to assign memory to ccm if need more than 8k for other tasks

but not enuff memory in that case and can't program it (look for
larger arrays?) - set now to 32768 so can do loggy as is and can
always change loggy

will need to look into stm32_flash.ld for ccm definition - TESTed okayyyy....

eg. u16 sin_data[256] __attribute__ ((section (".ccmdata")));  // sine LUT Array

FIXED 12/11

- stmlib => fft etc. ???

so we put eg.  int16_t pWavBuffer[3840] __attribute__ ((section (".ccmdata")));

// testing now basics - why is so quiet?

// parwave is in nsynth - this handles the klatt frames

*** final 11/11 notes

- need to break down phoneme frames and/or move phoneme generation out
  of audio.c interrupt as is too long/slow - also as if we re-trigger
  fast then is only start of phoneme we hear...

  moved out of interrupt which means we have 32 samples/trigger always issue (so is 32 samples max slowed)- seems okay now

- to test all phonemes... also still question of volume to solve - HW on test board?

[- enter_phonemes() in phtoelm is executed only once? and can we bypass
  this for individual phonemes? or is case of phoneme and last one?]

/// all of rsynth is about transitions between phonemes and we just
have one - so simplify or fake this/make longer phoneme cases. see holmes.c

/BUT/and our list of phonemes is the lookup list - to figure out what we
need to send to holmes for 2nd part and simplify holmes for 1 phoneme 12/11
or do X/Y of 2 phonemes - but what of trigger? or trigger on max!

either way simplify to numericals an no string stuff/memory 

- klatt/rsynth on pc verbose to check all...-> see Downloads/rsynth-2.0 (also updated rsynth version?)

- TODO: raw klatt with certain start positions and worm off from these within parameter bounds for each

- TODO: generate and test square for vocoder

** 12/11

- fixed stm32_flash.ld CCM mistake

- retest trigger - fixed as VOLATILE

- break down rsynth - problem is if we even have 1 phoneme + stress then is ended!

so we need to open up holmes.c so keeps running and writes directly
into audio_buffer and deals with trigger/phoneme selection (is always
one phoneme behind? - but not great idea as we can't look ahead?

how do we get stress and dur from phoneme?

this is dur in phone_to_elm

if (!(p->feat & vwl))
stress = 0;
t += phone_append(elm,StressDur(p,stress));
(int) (StressDur(p, stress, islong)));
#define StressDur(e,s,l) ((e->ud + (e->du - e->ud) * s / 3)*speed)

for each one in elements.def

next bit is stress?

stress is either 0,1,2 or 3

so we have phoneme_num//dur//stress and 1/6/0 seems to be ending (twice??) *TODO* make that array which is test_elm

- also need to get rid of pwavebuffer and write straight IN DONE

- 32k=64k=128 frames

- can enlarge audio buffer now we have fixed ccm so could be 60k =
  120k = say 200 frames audio.h = 58870 with log_gen.py calculating
  end

*if we enlarge then re-do loggy for this size* DONE

*69 is number of phonetic elements - stress or no stress = 69x4=272 - close to 255???* leave stress as 0 for now

*** notes

- how does CV select phoneme - like how often do we sample CV to give
phoneme? do we have phoneme list which we run through into buffer and
shift out or? based on speed? as have it trigger is the one

- working on run_holmes which is constant running and trigger-able -
  test this and then figure out how to update list... 

- clip in nsynth *4.0f for volume increase ADDED - VOLUME fixed

- still scheduling question - say for run_holmes so doesn't just cycle
  over itself... wait until playhead passes how?

// and run_holmes seem start with phrase fine and run DOWN - if we run continuous then will tail off!

- run_holmes as 2nd mode (MODE=1)

- how does run_holmes know how much to fill buffer? - overfill?/average - silence is ok

*** TODO

- triggering and scheduling is main issue// add to end of phoneme list and shift left or just re-write (more modes?)re-write!-TODO

- mode1-run_holmes - use trigger to freeze any changes to phoneme list as extra mode-TODO

*TODO: proof tests on VOSIM(sc/braids/csound/sc-formlets),XY(bbandpass,doformantfilter, biquad), vocoder(ladspa?/mdavoc=input and
mdavocoder?/mdatalkbox/pv_vocoder=justFFTsofar), LPC(talkie and SC), canto etc.* nearly DONE

*TODO: changes suggested above//how to test-simulate triggerCV also*

** 13/11

Note that trigger will always be slow as we _just_ process the buffer in audio.c - not LIVE...

Working on *VOSIM_SC* versionings - trigin could also be seperate timer/counter - controlled by? - Impulse.ar - LFUGens.cpp

- need to organise parameters for VOSIM as so far we don't do decay

- writepos always given and returned so we can sync

- single VOSIM - until it ends, how is triggered? - but this is just SC triggering

*** notes

- do impulse.ar in vosim, but also like random triger variant that we have

VOSIM_SC:

*ar (trig: 0.1, freq: 400, nCycles: 1, decay: 0.9, mul: 1, add: 0)
Arguments:
trig [ar kr] starts a vosim pulse when a transition from non-positive to positive occurs and no other vosim is still going. audio rate input will produce sample accurate triggering.
freq [ar kr] the frequency of the squared sinewave.
nCycles	- the number of squared sinewaves to use in one vosim pulse. nCycles gets checked when VOSIM receives a trigger.
decay - the decay factor.

eg. http://doc.sccode.org/Classes/VOSIM.html

*do away with END and use as 3rd parameter - eg. in phonemes do we even use 2nd par?*DONE

*TODO: rationalise phonemes so there are 64 or is probability table - also order in which they are arranged could follow probability of transitions...*DONE

** 15/11

Different voices:

Note in Klatt: The facility to use a sampled natural excitation
waveform has been implemented. Naturalness of the resulting synthetic
speech can be greatly improved by using the glottal excitation
waveform from a natural speaker, especially if it is the speaker on
whose voice the synthesis is actually based. This may be obtained
indirectly by inverse-filtering a vowel.

HOW? - this function is in different klatt: [[file:~/Downloads/www.laps.ufpa.br/aldebaro/classes/04procvoz1sem/Klatts/Klatt-C-Windows-F0flutter/Src/parwave.cpp::/*]]

but we could use incoming samples as this? inverse filtering?

Take a recorded vowel and locate the overall peaks and valleys in the spectrum (the formants) by using an LPC (linear predictive coding) algorithm

These peaks and valleys, at least theoretically, should represent the resonances in the mouth caused by a given tongue shape

Use this information to reconstruct the voicing signal (the source) without those peaks and valleys

This is accomplished by inverse-filtering the signal with the LPC, raising the parts of the spectrum which the LPC says are low, and lowering the parts which the LPC says are high. The end result, ideally, will be the source signal as if the person had no vocal tract at all.

http://doc.sccode.org/Classes/LPCAnalyzer.html

but inverse filter?

https://github.com/freedv/codec2/blob/master/src/lpc.c

[[file:~/projects/ERD_modules/worm/lpc.c::FILE........:%20lpc.c][file:~/projects/ERD_modules/worm/lpc.c::FILE........: lpc.c]]

Klatt:Flutter is one of few globals?

also NATURAL and IMPULSIVE in def_pars.c to test as is always now set to impulsive

now klatt_params - see also http://linguistics.berkeley.edu/plab/guestwiki/index.php?title=Klatt_Synthesizer_Parameters

*** TODO

- x/y bandpass - which ones in DI? ABOVE

- vocoder/s - see ABOVE

- alt speech synths listed ABOVE

- klatt LPC stuff

- finish making/remaking phoneme list in klatt/run_holmes above and re-check if runs off/how to re-start or does that happen now?

/////

- raw klatt and other wormings....

- phoneme probabilities (n-grams) and all TODO above!

** 16/11

- added resync on mode change - to TEST all

- phoneme list rewrite based on probabilities so now 64 phonemes

- started on robo/tts - compiles so far but need to know how phonemes are represented - by way of list and stops/numerals etc... TODO!

phonemesToData(textp,s_phonemes)

*** TODO:

- howmany written should depend on readspeed [note: that we can also
  break down klatt frame into smaller chunks as long as we buffer and
  keep track of these in an array]

- Klatt elements - new definitions, other voices eg. whisper, croak, female?

also X= change parameter, Y select parameter - need list and constraints see klatt_params - also this will use code in holmes.c

notes: klattsyn.py, new python code in downloads


*** phoneme probabilities 

phoneme_prob.py

using rsynth-2.0 printing phonemes from
/root/projects/earthcode/worm/beddoesvol1gosse_trimmed we can lose a
few phonemes and re-order as:

u8 phoneme_prob_remap[64]={1, 46, 30, 5, 7, 6, 21, 15, 14, 16, 25, 40, 43, 53, 47, 29, 52, 48, 20, 34, 33, 59, 32, 31, 28, 62, 44, 9, 8, 10, 54, 11, 13, 12, 3, 2, 4, 50, 23, 49, 56, 58, 57, 63, 24, 22, 17, 19, 18, 61, 39, 26, 45, 37, 36, 51, 38, 60, 65, 64, 35, 68, 61, 62}

[prob_other to be used for other phoneme description on laptop - in modified rsynth2.0]

** 17/11

DONE:

- end removed and replace as SELZ
- mdavocoder working but could do with some tuning - try other vocoders too!
- ladpsa vocoder running
- basic bandpass running with X/Y code - seems work fine. maybe extend with extra formantsTODO...

- pick vowel formants using doformant - TODO: cross-fade to smooth out, use own carriers

also more formants at: https://github.com/supercollider-quarks/Vowel/blob/master/Vowel.sc

need to remember how to convert db and bw!

- formlet code = FOF - see also: http://composerprogrammer.com/teaching/supercollider/sctutorial/12.2%20Singing%20Voice%20Synthesis.html

need to be able to change frequency

SAM working but only with arrays in RAM - not CCMdata or FLASH -????

do we need to init like:

const unsigned char flags[81]  __attribute__ ((section (".flash")))={
with [81]???? TRY!

*** Notes:

BPFSC and BBandpass would operate as fixed and this is what we have already so leave for now
with doformant - somehow need to figure out offset and mix for this for kind of singing - multiple voices/oscillators

Also seems like common to some effects that we would have oscillator/noise etc. triggered?

for SAM: http://www.retrobits.net/atari/sam.shtml

*** TODO: - PRIORITISE: changes/TODO as above and all tests

- possibilities of vocoding with buffer generated audio

*- Borsboom/zerius vocoder in earthvoice2 dir to look at*

- mdavoc.c is wierd for carrier source

- look at propellor/cordic thing for worm tract simulation

- klatt as singing - constant sounds?

- different voices in sam.c - parameter live altering, speed of sam, lookup array for phonemes

- trigger/schedule for one word/phrase after the other

- pull audio-bufsz back up from 32768

** 18-19/11

- done lpc.c (talkie) - but triggering - always issue with free-running round in buffer overwrites itself

- using encoder - calc.m and romgen from talkie with freemat and online convertor - use 8 KHz 16 bit mono recordings to encode words for lpc.c

- Formant object also in SC - done

** TODO

- wormlpc (but there in analysis phase also see sc live stuff),
  wormvoice simulation, how to do crossfading - need run 2 filters

- increase LPC vocabulary - pointers to flash works or not?

- *triggering and scheduling on all*

- braids code only for worming

- Borsboom vocoder to port to static memory allocation [vocoder added and compiles/runs but not result and slows incoming audio]

- LPC live analysis = [[file:~/sc3-plugins/source/NCAnalysisUGens/LPCAnalyzer.cpp::/*]]

*Think about* - mixing of round-buffer and live(where is no speed),
scheduling questions always... eg. vosim is more in live audio.c than
round buffer and others other way round...


** 20/11

- vocoder fixed (was sqr in fft_mag) - without overlap and would be nice to try different carriers
(check also timing in interrupt? - done and seems okay so far)

- started on [[file:lpcanalysissc.c::*%20LPCAnalysis.h][file:lpcanalysissc.c::* LPCAnalysis.h]] - just rough filling in so far

- braids for worming: [[file:braidworm.c::/%20vosim/vowel/vowelfof][file:braidworm.c::/ vosim/vowel/vowelfof]] - again filling in - also we need dsp from stmlib!

Vowel.sc definitions at: [[file:~/projects/earthvoice2/Vowel/Formants.sc::/%20Pseudo%20Ugens%20to%20be%20used%20together%20with%20Vowel][file:~/projects/earthvoice2/Vowel/Formants.sc::/ Pseudo Ugens to be used together with Vowel]]

and Vowel.SC there!

along with Formants and BPFstack (multiples of Formant we have and BPF) which could be adapted also for these vowel lists.

how vowels compare with braids?

interleaving between vowels

SC dynklank resonators - example in Vowel.schelp - klank= [[file:~/SuperCollider-Source/server/plugins/OscUGens.cpp::void%20Klank_Dtor(Klank%20*unit)][file:~/SuperCollider-Source/server/plugins/OscUGens.cpp::void Klank_Dtor(Klank *unit)]]

** 22/11

NOTES: phoneme_prob_other is used for our phoneme probabilities on
laptop/NOT worm with say.c modified in rsynth-2.0 as marked with xxxxx

- modded just to print selected phonemes (what was scheme which was just their number as in Elements.def?), and re-modded just to say these phonemes

- but conversion of text to phoneme using say.c repeats sections? -
  FIXED but should do 2 versions of say and co, also vague fullstop
  business 

TO FIX: // fullstops // 2 versions // readable phonemes

TODO: 

- summary for each mode so far and each TODO

- how klatt frame size relates to each change in parameters - where we need to intersect for raw klatt? nsynth -> parwave?

"Each frame of parameters usually represents 10ms of output speech. Two
(simple!) example parameter files are supplied with the package."

at 32000 samples per sec 10ms=320 samples - in def_pars.c we have 8ms per frame = 256 samples

see also: http://www.asel.udel.edu/speech/tutorials/production/gensyn.htm

[- pull rsynth-2.0 into src git]

- port rsynth changes back to darkint voice code

** 23/11

TODO from yesterday TODO

+

finish working through braids, lpcanalysis, vowel.sc, stk above and look at dynklank resonators:

note:

inline float32 zapgremlins(float32 x)
{
	float32 absx = std::abs(x);
	// very small numbers fail the first test, eliminating denormalized numbers
	//    (zero also fails the first test, but that is OK since it returns zero.)
	// very large numbers fail the second test, eliminating infinities
	// Not-a-Numbers fail both tests and are eliminated.
	return (absx > (float32)1e-15 && absx < (float32)1e15) ? x : (float32)0.;
}

+ mul in SC portings? and db and bw in vowel parameters - how we did this for doformant

+ const arrays of vocal filter parameters eg. for klank resonators

+ basic LPC to try out

// so break down to:

1- new experiments/code as above
2- summary and tweaking of what modes we have so far: basic excitation osc generation, fixed filters stored
3- scheduling and triggering schemes overall...
4- towards manual
5- HW tests for basic design and trigger in! IN PROGRESS
6- worming and raw Klatt/LPC broken down

** 24/11

hardware - powers up fine. need to rewire top 3 potis to mirror CV ins
below (do with cuts marked on diagram), enlarged poti side holes - redone in revised.brd//TODO
after all tests: recheck all, zones, vias.

** 25/11

Board tested and audio working. TODO: test potis and CV... 

*** Hardware notes:

- Define as TEST in Makefile - audio.c for DARKINT test board -  also as worm.brd output is on LEFT
not on RIGHT!

- Programmer header is straight to STLINK rather than swop we have in DARKINT

*** Software

- braids - compiled and working - just need to tweak parameter ranges... and WORM out as is too clean (esp... RenderVowel)
also if we can use square etc. as excitation?

-lpcanalysis - compiles and seems to work from SC - need more exciters...


TODO: 

4-dynklank resonators - save coeffs as table first

/// more structural

2-vowel.sc - lists for other generators to use...

5-basic LPC code to re-worm

6- klatt to re-worm

+ carrier generation and use of audio_buffer as either carrier or as voice?

** 27/11

Cook - singer/SPASM - only code is in CLM but see TRM below 

see also STK/voicform: tick in includes eg. [[file:~/darkint/docs/stk/include/VoicForm.h]]

** 30/11

Vocal tract simulations: TRM in gnuspeech: http://svn.savannah.gnu.org/viewvc/nextstep/trunk/src/softwareTRM/?root=gnuspeech

and: https://github.com/lmjohns3/py-trm/blob/master/README.rst

see [[file:~/projects/ERD_modules/worm/docs/softwareTRM/tube.c]]

//List excitations: square wave, cluster of sine waves, looped excitation, white noise, impulses - what else and how? as tables?

//VoicForm: compiles// to testTESTED

Phoneme definitions at: [[file:~/sc3-plugins/source/StkUGens/stk-4.4.2/src/Phonemes.cpp]]

SingWave modulates input wavetable (raw file=impuls20.raw) could be
buffer or we use as table - what is format of impuls20.raw? 16 bit
signed but BIG ENDIAN!

FormSwep is filter sweepable.

[see also:   onezero_.setZero( -0.9 ): [[file:~/sc3-plugins/source/StkUGens/stk-4.4.2/src/OneZero.cpp]]
  onepole: [[file:~/sc3-plugins/source/StkUGens/stk-4.4.2/src/OnePole.cpp]] ; noiseEnv_.setRate( 0.001 ) [[file:~/sc3-plugins/source/StkUGens/stk-4.4.2/src/Envelope.cpp]]
]

//////////////////////

// phoneme definitions from braids, from SC, from STK ???

TODO: TRM!!!

** 2/12

- VoicForm kind of works but we need to test further and add vibrato
  and controls. also if we go further with STK (and eg. FMVoices with
  same dependencies on numerous other files)??? NON!

- preparing DONE

*** *tube.c*

- floats, no tempfiles, compiles now... TODO: memory management, output-framesize? DONE

Notes:

dataEmpty: Converts available portion of the input signal to the new sampling
rate, and outputs the samples to the sound struct.

buffer is 1024,,,, functions: flushbuffer, datafill , *dataempty writes to temp file*...

*** TODO still:

- play with TRM/tube on PC - worm simulation - width of mouth/nose???? DONE
- implement generic wavetables, envelopes etc. for excitations and how might work with buffer
- TRM portings DONE
- triggering, list of modes and tweaks/modifiers to each one - finalise almost
*- wormings, raw LSM tests, raw KLATT*

- tie up formant filters maybe see https://github.com/4ms/SMR https://www.keil.com/pack/doc/CMSIS/DSP/html/group___g_e_q5_band.html

** 3/12

TRM Notes:

- At 32k samples we have 96k samples for 12 sets of parameters in input (so 96/12=8k per set)

- Basic parameters and then frame parameters

- What is set with calloc and can it be set as array/not dynamic?

wavetable can be static allocated (is only rewritten if source is pulse)

number of taps is calculated in init of filter

    FIRData = (float *)calloc(numberTaps, sizeof(float)); // TODO as fixed?
    FIRCoef = (float *)calloc(numberTaps, sizeof(float));

  return ((INPUT *)malloc(sizeof(INPUT))); // TODO? - from addinput? 

this is inputtable which is each parameter frame/set +1???? so if we have fixed number of parameter sets??? we can fix this...

fixed as max size for both FIR??? could overflow

** 4/12

- TRM tube.c init_parameters but still need get rid of dynamic
  memory - we just have one input-table (+1=2) so thats 8k samples
  into audio_buffer (leave dynamic as filter needs)// tableone and tabletwo

- how do we know when phrase/frame is done? to avoid overwriting? is just one call to synthesize?

- crashes so far in: dataEmpty!FIXED - double initialisation as we
  initialize in main: initializeSynthesizer();// includes call to
  init_parameters !!!! TUBE.C - TRM! and was 0.0 for volume in first of frames from input

- could simplify the linked list as we just have 2 frames (1+interpolation) TODO!

*** TODO: 

- that we could have several different base vocal tract modes for TRM
  -> parameter_list or use SELY/SELZ to vary the main parameters as
  below.

- trim working modes // run thru - also twin buffers - switch vocoder voice/excitation etc...

** 5/12

- list of TRM parameters

TRM parameters see: http://pages.cpsc.ucalgary.ca/~hill/papers/synthesizer/body.html

we have for each frame:

	glotPitch = strtod(ptr, &ptr);
	glotVol = strtod(ptr, &ptr);
	aspVol = strtod(ptr, &ptr);
	fricVol = strtod(ptr, &ptr);
	fricPos = strtod(ptr, &ptr);
	fricCF = strtod(ptr, &ptr);
	fricBW = strtod(ptr, &ptr);
	for (i = 0; i < TOTAL_REGIONS; i++) // 8 values
	    radius[i] = strtod(ptr, &ptr);
	velum = strtod(ptr, &ptr); // last value

in [[file:~/Downloads/gnuspeech-0.9/Applications/Monet/samples/diphones.degas]] we have:

///
*a phone vocoid voiced 

	microInt: *0.000000		r2: *0.650000
	glotVol: *60.000000		r3: *0.650000
	aspVol: *0.000000		r4: *0.650000
	fricVol: *0.000000		r5: *1.310000
	fricPos: *5.500000		r6: *1.230000
	fricCF: *2500.000000		r7: *1.310000
	fricBW: *500.000000		r8: *1.670000
	r1: *0.800000		velum: *0.100000
///

So microint and pitch?

[[file:~/Downloads/gnuspeech-0.9/Applications/TRAcT/tube.c]] is same as our tube model...

maybe keep glotPitch as static or change with SELY

but we leave microint as first in float input_frames[64][16]=

TO TEST with what could be SILENT phonemes?????

///
Also NOTE:

Parameters
microInt
Min: -10.000000  Max: 10.000000  Default: 0.000000

glotVol
Min: 0.000000  Max: 60.000000  Default: 60.000000

aspVol
Min: 0.000000  Max: 60.000000  Default: 0.000000

fricVol
Min: 0.000000  Max: 10.000000  Default: 0.000000

fricPos
Min: 0.000000  Max: 7.000000  Default: 5.500000

fricCF
Min: 100.000000  Max: 20000.000000  Default: 2500.000000

fricBW
Min: 250.000000  Max: 20000.000000  Default: 500.000000

r1
Min: 0.000000  Max: 3.000000  Default: 0.800000

r2
Min: 0.000000  Max: 3.000000  Default: 1.500000

r3
Min: 0.000000  Max: 3.000000  Default: 1.500000

r4
Min: 0.000000  Max: 3.000000  Default: 1.500000

r5
Min: 0.000000  Max: 3.000000  Default: 1.500000

r6
Min: 0.000000  Max: 3.000000  Default: 1.500000

r7
Min: 0.000000  Max: 3.000000  Default: 1.500000

r8
Min: 0.000000  Max: 3.000000  Default: 1.500000

velum
Min: 0.000000  Max: 1.500000  Default: 0.100000

/////

Also useful:

Male
length	17.5
tp	0.40
tnMin	0.24
tnMax	0.24
glotPitch -12.0

Female
length	15.0
tp	0.40
tnMin	0.32
tnMax	0.32
glotPitch 0.0

LgChild
length	12.5
tp	0.40
tnMin	0.24
tnMax	0.24
glotPitch 2.5

SmChild
length	10
tp	0.40
tnMin	0.24
tnMax	0.24
glotPitch 5.0

Baby
length	7.5
tp	0.40
tnMin	0.24
tnMax	0.24
glotPitch 7.5

TODO:

- also test with say 4 frames and how do away with linked list business - setinput and setcontrolrate... - should work///

- how/do we alter main params - also say map SELX->phoneme, SELY-> length, SELZ-> glotpitch (so re-init if changes or?)

** 7/12

- checked revised panel

- checking revised brd and fixed missing CV4. checked - matching, works...DONE
- double-check again and add zones and vias and re-check gerbers

*** TODO:

- finish TRM changes=linked list, longer list of frames, change vocal tract as above and WHEN? - length, glotpitch
- all working models/tweaks
- excitations and buffer fills/switches
- trigger code
- wormings and tables of min/max parameters for each mode - CONSTRAINTS
- raw KLATT and LSM wormings
- check CV allocations for new board and test!

- trigger//when_mode_change in main -??? 
- look at SMR??? https://github.com/4ms/SMR

** 14/12

- re-acquaint with tube.c - where we can deal with say glotpitch and
  where inits are made --> most of initializeSynthesizer uses
  nyquist/samplerate which is determined by tube length?

solutions as length and pitch is what we want to vary = pitch should
be fine live, and have set of tables for different tube lengths as above

but still need to clean up linked list, how to add new frames and so
on, also how that change in glotPitch works with interpolation?

** 15/12

- added lpc dir from SLP - TODO: run commandline tests from docs/SLP, fix mallocs, work in

- votrax?
  https://github.com/OpenEmu/UME-Core/blob/master/mame/src/emu/sound/votrax.c
   - see UMECORE under sound in docs - also some other speech chip emulations eg.  TSI S14001A, TMS 5110/5220A (speek and spell)-LPC

[[file:~/projects/ERD_modules/worm/docs/UME-Core/mame/src/emu/sound/votrax.c::Simple%20VOTRAX%20SC-01%20simulator%20based%20on%20sample%20fragments.][file:~/projects/ERD_modules/worm/docs/UME-Core/mame/src/emu/sound/votrax.c::Simple VOTRAX SC-01 simulator based on sample fragments.]]

- TODO: port VOTRAX and TMS>????

** 18/12

- tested CV hardware all fine // switched round in audio.h (on x60 so
  transfer here), need tweaks for resonance (could be selz?) on X/Y
  filter, also ifdef switch for INPUT also in audio.c and maybe try other bandpass?

- or SELZ for x/y filter can scale both formants for size of throat/voice

- effect.c x/Y filter should be in parallel, amplification and varying Q for each? use of example vowels???

how again to convert bandwidth to Q: 

~bpOctavesToRq = { arg octaves; (pow(2, octaves) - 1) / pow(2, octaves).sqrt };

say 130 hz for x, 70 hz for y?

find formant table from SC again: Vowel.sc definitions: [[file:~/projects/earthvoice2/Vowel/Vowel.sc]]

eg. 			.put( 'a', 'soprano', 'freq',[ 800, 1150, 2900, 3900, 4950 ])
			.put( 'a', 'soprano', 'db', [ 0, -6, -32, -20, -50 ])
			.put( 'a', 'soprano', 'bw',	 [ 80, 90, 120, 130, 140 ])

but what is bw, how relates to Q, and dbamp... but these seem to work with BBandPass as evidenced by below...

- how we do db amp? but more how this becomes x and y scalings with bandwidth????

bw also goes up as freq goes up...

also from FormantTable.sc for BBandPass:

		table.put(\sopranoA, [[800, 1150, 2900, 3900, 4950], [0, -6, -32, -20, -50].dbamp, [80, 90, 120, 130, 140]]);
		table.put(\sopranoE, [[350, 2000, 2800, 3600, 4950], [0, -20, -15, -40, -56].dbamp, [60, 100, 120, 150, 200]]);
		table.put(\sopranoI, [[270, 2140, 2950, 3900, 4950], [0, -12, -26, -26, -44].dbamp, [60, 90, 100, 120, 120]]);
		table.put(\sopranoO, [[450, 800, 2830, 3800, 4950], [0, -11, -22, -22, -50].dbamp, [70, 80 ,100, 130, 135]]);
		table.put(\sopranoU, [[325, 700, 2700, 3800, 4950], [0, -16, -35, -40, -60].dbamp, [50, 60, 170, 180, 200]]);
		table.put(\altoA, [[800, 1150, 2800, 3500, 4950], [0, -4, -20, -36, -60].dbamp, [80, 90, 120, 130, 140]]);
		table.put(\altoE, [[400, 1600, 2700, 3300, 4950], [0, -24, -30, -35, -60].dbamp, [60, 80, 120, 150, 200]]);
		table.put(\altoI, [[350, 1700, 2700, 3700, 4950], [0, -20, -30, -36, -60].dbamp, [50, 100, 120, 150, 200]]);
		table.put(\altoO, [[450, 800, 2830, 3500, 4950], [0, -9, -16, -28, -55].dbamp, [70, 80, 100, 130, 135]]);
		table.put(\altoU, [[325, 700, 2530, 3500, 4950], [0, -12, -30, -40, -64].dbamp, [50, 60, 170, 180, 200]]);
		table.put(\counterTenorA, [[660, 1120, 2750, 3000, 3350], [0, -6, -23, -24, -38].dbamp, [80, 90, 120, 130, 140]]);
		table.put(\counterTenorE, [[440, 1800, 2700, 3000, 3300], [0, -14, -18, -20, -20].dbamp, [70, 80, 100, 120, 120]]);
		table.put(\counterTenorI, [[270, 1850, 2900, 3350, 3590], [0, -24, -24, -36, -36].dbamp, [40, 90, 100, 120, 120]]);
		table.put(\counterTenorO, [[430, 820, 2700, 3000, 3300], [0, -10, -26, -22, -34].dbamp, [40, 80, 100, 120, 120]]);
		table.put(\counterTenorU, [[370, 630, 2750, 3000, 3400], [0, -20, -23, -30, -34].dbamp, [40, 60, 100, 120, 120]]);
		table.put(\tenorA, [[650, 1080, 2650, 2900, 3250], [0, -6, -7, -8, -22].dbamp, [80, 90, 120, 130, 140]]);
		table.put(\tenorE, [[400, 1700, 2600, 3200, 3580], [0, -14, -12, -14, -20].dbamp, [70, 80, 100, 120, 120]]);
		table.put(\tenorI, [[290, 1870, 2800, 3250, 3540], [0, -15, -18, -20, -30].dbamp, [40, 90, 100, 120, 120]]);
		table.put(\tenorO, [[400, 800, 2600, 2800, 3000], [0, -10, -12, -12, -26].dbamp, [40, 80, 100, 120, 120]]);
		table.put(\tenorU, [[350, 600, 2700, 2900, 3300], [0, -20, -17, -14, -26].dbamp, [40, 60, 100, 120, 120]]);
		table.put(\bassA, [[600, 1040, 2250, 2450, 2750], [0, -7, -9, -9, -20].dbamp, [60, 70, 110, 120, 130]]);
		table.put(\bassE, [[400, 1620, 2400, 2800, 3100], [0, -12, -9, -12, -18].dbamp, [40, 80, 100, 120, 120]]);
		table.put(\bassI, [[250, 1750, 2600, 3050, 3340], [0, -30, -16, -22, -28].dbamp, [60, 90, 100, 120, 120]]);
		table.put(\bassO, [[400, 750, 2400, 2600, 2900], [0, -11, -21, -20, -40].dbamp, [40, 80, 100, 120, 120]]);
		table.put(\bassU, [[350, 600, 2400, 2675, 2950], [0, -20, -32, -28, -36].dbamp, [40, 80, 100, 120, 120]]);

////

- votrax.c sc01.bin is 512 bytes (0x200) - 64 phonemes = 8 bytes each

** 19/12

- vowel tables
- MAME portings - test
- excitations
- wormings/tweaks all modes
- *we always need transition from previous phoneme for each mode (inc X/Y)!*

** 22/12

- Mode 11-     Formant_process crashes????

** 23/12

- porting votrax.c from mame as above - compiles (no tested on ARM) but no output?
//TODO: compiles but no output, all doubles, ceil/sqrt/tan/fabs to tanf etc... float

- what is missing? does that code even work?

NOTES:

	MCFG_VOTRAX_SC01_ADD("votrax", 1700000, votrtnt_votrax_interface ) /* 1.70 MHz? needs verify */

[[file:~/projects/ERD_modules/worm/docs/UME-Core/mame/src/mess/drivers/votrtnt.c::*%20Votrax%20Type%20'N%20Talk%20Driver][file:~/projects/ERD_modules/worm/docs/UME-Core/mame/src/mess/drivers/votrtnt.c::* Votrax Type 'N Talk Driver]]

how/where we write data to SC01/votrax: WRITE8_MEMBER( votrax_sc01_device::write )

- now test code seems to work // 0x3f = 63 // need to figure out speeds!

** 28/12

- list of each mode and what needs to be done TODO!

- votrax.c some sounds but timing is out - how do we know when new phoneme comes:

sound_stream_update somehow with samples from m_stream->update();

is how mame emulates timing but must be some shortcut:

[[file:~/projects/ERD_modules/worm/docs/UME-Core/mame/src/emu/sound.c::void%20sound_stream::update()][file:~/projects/ERD_modules/worm/docs/UME-Core/mame/src/emu/sound.c::void sound_stream::update()]]

and then number of samples is: (update_sampindex - m_output_sampindex)

	// how long is phoneme in samples????????
