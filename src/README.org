* ERD?WORM dirty speech synth

32k sample rate

* TODO

- sort out memory allocations
- basics of read/write head and speech integration
- tests for each speech function/mode
- vocoder and how we deal with buffers?
- integrate/test/new knob allocations

* modes so far imagined - say 32!

0/klatt - single phoneme
0.1/klatt - list of phonemes
0.2/klatt - worm away starting on phoneme base (earth worm) - or trigger that base
1/vosim 
2/x-y filter 
3/LPC 
4/vocoder+different channel
swops/arrangements 
x/klatt screwed/bent 
x/other filter 
x/raw wormed klatt
x/wormed vosim 
x/wormed x/y filter

+ other speech synths

++ vocoder options with different sources - square wave, white noise etc.

all modes doubled by worm - worm from base through parameter
constraints for each. trigger resets to base. thus double for each mode more or less


* progress

** 4/11/2015

- stripped code and it compiles

** 9-10/11/2015

- knobs left/right from top (pcb and lach=test) = 0/mode-(2..3)
1/selX.egX-(3..2) 2/speed-(0..4) 3/end-(4..1)
4/trigthresh/vocoderfreq/othersel.eg/selY-(1..0) SEE audio.h

- input=threshold/vocoder_voice

- question of scheduling: examples? trigger_to_sync needs to be in
  reading in code (and trigger say new phoneme), braids operates with blocks-sync_buffer and render_buffer?

what is framesize for audio=32 x u16, and how frames work for speech/klatt?

- list modes and examples: 

0/klatt 1/vosim 2/x-y filter 3/LPC 4/vocoder+different channel
swops/arrangements x/klatt screwed x/other filter x/raw wormed klatt
x/wormed vosim x/wormed x/y filter

+++ vocoder options with different sources - square wave, white noise etc.

all modes doubled by worm - worm through parameters for each

- what effects we implement in DI: mdavoc, pvvoc

- what are other speech synth/modes??? LIST from earthvoice2:

raw//klatt?
PropTermialTract: propellor assembly NO-X
robo: arduino 
sam: It is an adaption to C of the speech software SAM (Software Automatic Mouth) for the Commodore C64
SAMarduino: arduino of SAM above
Talkie-LPCcode: :LPC
tinySAM.c: small SAM above
Tiny Speech Synth: C code
TTS: as robo above

other: cantarino - daisybell, braids(?), flite, VOSIMUGens (SC), formlets, espeak

https://batchloaf.wordpress.com/2012/09/21/ugly-speech-synthesis-in-c/

+ from DI/voice - also question is what we tried already there:

Formlet as filter in SC: [[file:~/SuperCollider-Source/server/plugins/FilterUGens.cpp::void%20Formlet_next_1(Formlet*%20unit,%20int%20inNumSamples)][file:~/SuperCollider-Source/server/plugins/FilterUGens.cpp::void Formlet_next_1(Formlet* unit, int inNumSamples)]]

VOSIM: [[file:~/sc3-plugins/source/VOSIMUGens/VOSIM.cpp::VOSIM%20implemented%20by%20L%C3%A9on%20Spek][file:~/sc3-plugins/source/VOSIMUGens/VOSIM.cpp::VOSIM implemented by LÃ©on Spek]]

LPC: [[file:~/sc3-plugins/source/NCAnalysisUGens/LPCAnalysis.cpp::*%20LPCAnalysis.cpp][file:~/sc3-plugins/source/NCAnalysisUGens/LPCAnalysis.cpp::* LPCAnalysis.cpp]]

1. phase vocoder/FFT - our old pitchscale.c??? 

JoshUGens/sc/classes/Vocoder.sc

SCcode=PV_SpectralMap, borsboom, snokoder

2. 16 channel bandpass/formant/vocoder: ladspa DONE

or vst-mda version: mdaVocoder.cpp TEST/TRY

3. FFT based (spectral swops/exchange - SCcode=PV_SpectralMap, borsboom/zerius=vocoder in docs,
snokoder) - breakdown stages

FFT on ARM: http://coactionos.com/embedded%20design%20tips/2013/10/13/Tips-FFT-on-the-ARM-Cortex-M3/

(convolution = multiplication in freq domain)

4. simple formant filtering (above)//generic filter conv.

formant frequency/vowel table (vowels announced from buf16 as text->vowels,Qlength of vowel?) 
formant ugens: http://gurzil.livejournal.com/15375.html

SC synthdef for vowels with BBandPass : http://sccode.org/1-4Vk:

and:

http://www.sussex.ac.uk/Users/nc81/modules/cm1/scfiles/12.2%20Singing%20Voice%20Synthesis.html

csound vosim

CLM: https://ccrma.stanford.edu/software/snd/snd/clm.html#formant

biquad: http://www.musicdsp.org/showone.php?id=64

*This week to have basic scheduling for klatt and knob allocations, memory. Also kind of template for other generators*

** 11/11

- can we have say 128k contig memory? can use say 120k but need to assign memory to ccm if need more than 8k for other tasks

but not enuff memory in that case and can't program it (look for
larger arrays?) - set now to 32768 so can do loggy as is and can
always change loggy

will need to look into stm32_flash.ld for ccm definition - TESTed okayyyy....

eg. u16 sin_data[256] __attribute__ ((section (".ccmdata")));  // sine LUT Array

FIXED 12/11

- stmlib => fft etc.

so we putr eg.  int16_t pWavBuffer[3840] __attribute__ ((section (".ccmdata")));

// testing now basics - why is so quiet?

// parwave is in nsynth - this handles the klatt frames

*** final 11/11 notes

- need to break down phoneme frames and/or move phoneme generation out
  of audio.c interrupt as is too long/slow - also as if we re-trigger
  fast then is only start of phoneme we hear...

  moved out of interrupt which means we have 32 samples/trigger always issue (so is 32 samples max slowed)- seems okay now

- to test all phonemes... also still question of volume to solve - HW on test board?

[- enter_phonemes() in phtoelm is executed only once? and can we bypass
  this for individual phonemes? or is case of phoneme and last one?]

/// all of rsynth is about transitions between phonemes and we just
have one - so simplify or fake this/make longer phoneme cases. see holmes.c

/BUT/and our list of phonemes is the lookup list - to figure out what we
need to send to holmes for 2nd part and simplify holmes for 1 phoneme 12/11
or do X/Y of 2 phonemes - but what of trigger? or trigger on max!

either way simplify to numericals an no string stuff/memory 

- klatt/rsynth on pc verbose to check all...-> see Downloads/rsynth-2.0 (also updated rsynth version?)

- TODO: raw klatt with certain start positions and worm off from these within parameter bounds for each

- TODO: generate and test square for vocoder

** 12/11

- fixed stm32_flash.ld CCM mistake

- retest trigger - fixed as VOLATILE

- break down rsynth - problem is if we even have 1 phoneme + stress then is ended!

so we need to open up holmes.c so keeps running and writes directly
into audio_buffer and deals with trigger/phoneme selection (is always
one phoneme behind? - but not great idea as we can't look ahead?

how do we get stress and dur from phoneme?

this is dur in phone_to_elm

if (!(p->feat & vwl))
stress = 0;
t += phone_append(elm,StressDur(p,stress));
(int) (StressDur(p, stress, islong)));
#define StressDur(e,s,l) ((e->ud + (e->du - e->ud) * s / 3)*speed)

for each one in elements.def

next bit is stress?

stress is either 0,1,2 or 3

so we have phoneme_num//dur//stress and 1/6/0 seems to be ending (twice??)

- also need to get rid of pwavebuffer and write straight IN

- 32k=64k=128 frames

- can enlarge audio buffer now we have fixed ccm so could be 60k =
  120k = say 200 frames audio.h = 58870 with log_gen.py calculating
  end

*if we enlarge then re-do loggy for this size*

*69 is number of phonetic elements - stress or no stress = 69x4=272 - close to 255???* leave stress as 0 for now

*** notes

- how does CV select phoneme - like how often do we sample CV to give
phoneme? do we have phoneme list which we run through into buffer and
shift out or? based on speed? as have it trigger is the one

- working on run_holmes which is constant running and trigger-able -
  test this and then figure out how to update list... 

- clip in nsynth *4.0f for volume increase ADDED - VOLUME fixed

- still scheduling question - say for run_holmes so doesn't just cycle
  over itself... wait until playhead passes how?

// and run_holmes seem start with phrase fine and run DOWN - if we run continuous then will tail off!

- run_holmes as 2nd mode (MODE=1)

- how does run_holmes know how much to fill buffer? - overfill?/average - silence is ok

- triggering and scheduling is main issue// add to end of phoneme list and shift left or just re-write (more modes?)re-write!

- mode1-run_holmes - use trigger to freeze any changes to phoneme list as extra mode

*TODO: proof tests on VOSIM(sc/braids/csound/sc-formlets),
XY(bbandpass,library?), vocoder(ladspa?/mdavoc=input and
mdavocoder?/mdatalkbox/pv_vocoder=justFFTsofar), LPC(talkie and SC), canto etc.*
